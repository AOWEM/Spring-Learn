<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
        <!--1.导入spring的坐标spring-context，对应版本5.2.10.RELEASE-->

        <!--2.配置Bean-->
        <!--
                bean标签表示配置benn
                id属性表示给bean起名字
                class属性表示给bean定义类型
        -->
        <!--dao层-->
        <!--<bean id="bookDao"  class="com.yuanh.dao.impl.BookDaoImpl"/>-->
        <!--name 取别名-->
<!--        <bean id="bookDao" name="dao"  class="com.yuanh.dao.impl.BookDaoImpl"/>-->

        <!--
                定义bean的作用范围scope
                singleton：单列默认
                prototype: 非单列 创建的bean不一样
        -->
        <!--<bean id="bookDao" name="dao"  class="com.yuanh.dao.impl.BookDaoImpl" scope="prototype"/>-->



        <!--service-->
        <!--name="service service2 bookEbi" 起别名-->
       <!-- <bean id="bookService"  class="com.yuanh.service.impl.BookServiceImpl" >-->
        <!--<bean id="bookService" name="service service2 bookEbi" class="com.yuanh.service.impl.BookServiceImpl" >
                &lt;!&ndash;7.配置service与dao的关系&ndash;&gt;
                &lt;!&ndash;
                     property标签配置当前bean的属性
                     name属性表示配置那一个具体属性
                     ref属性表示参照那一个bean
                &ndash;&gt;
                <property name="bookDao" ref="bookDao" />
                &lt;!&ndash;调用上别的别名 建议还是调用id的名字 &ndash;&gt;
                &lt;!&ndash;<property name="bookDao" ref="dao" />&ndash;&gt;
        </bean>-->




        <!--bean的实列化-->
        <!--方式一：构造方法实列化-->
<!--        <bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" />-->

        <!--方式二：使用静态工厂实列化bean    factory-method必须吧方法名写上不然不知道调用那个方法  -->
<!--        <bean id="orderDao" class="com.yuanh.factory.OrderDaoFactory" factory-method="getOrderDao" />-->

        <!--方式三：使用实列工厂实例化bean-->
        <!--1.创建userFactory的bean-->
        <!--<bean id="userFactory" class="com.yuanh.factory.UserDaoFactory" />-->
        <!--2.在创建bean-->
        <!--<bean id="userDao" factory-method="getUserDao" factory-bean="userFactory"/>-->

        <!--方法四：实列化工厂 使用FactoryBean 实列化bean-->
      <!--  <bean id="userDao" class="com.yuanh.factory.UserDaoFactoryBean" />-->


        <!--bean的生命周期-->
        <!--init-method   destroy-method 分别代表初始化bean 和销毁前的执行-->
        <!--<bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" init-method="init" destroy-method="destory"/>

        <bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl">
                &lt;!&ndash;ioc依赖注入&ndash;&gt;
                <property name="bookDao" ref="bookDao"></property>
        </bean>-->


        <!--依赖注入-->
        <!--setter多重引用   引用类型对象-->
        <!--<bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" >
                &lt;!&ndash;依赖注入简单类型   &ndash;&gt;
                <property name="databaseName" value="mysql" />
                <property name="connetionNum" value="100" />
        </bean>
        <bean id="userDao" class="com.yuanh.dao.impl.UserDaoImpl" />
        <bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl">
                &lt;!&ndash;ref是引用bean的&ndash;&gt;
                <property name="bookDao" ref="bookDao"></property>
                <property name="userDao" ref="userDao"></property>
        </bean>-->

        <!--这个是依赖注入的四种方式  构造方法  的标准写法 但是耦合度太高-->
        <!--依赖注入的四种方式   构造方法
        <bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" >
                &lt;!&ndash;构造方法的 简单方法依赖注入&ndash;&gt;
                <constructor-arg name="databaseName" value="mysql" />
                <constructor-arg name="connetionNum" value="10" />
        </bean>
        <bean id="userDao" class="com.yuanh.dao.impl.UserDaoImpl" />
        <bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl">
                &lt;!&ndash;ref是引用bean的&ndash;&gt;
                &lt;!&ndash;这个属于set注入的方式&ndash;&gt;
                &lt;!&ndash;<property name="bookDao" ref="bookDao"></property>&ndash;&gt;
                &lt;!&ndash;构造器的植入方式 name="bookDao"他用的是形参的名字&ndash;&gt;
                <constructor-arg name="bookDao" ref="bookDao" />
                <constructor-arg name="userDao" ref="userDao" />
        </bean>-->


        <!--
                依赖注入的四种方式   构造方法
                解决形参名称的问题，与形参名不耦合了
        <bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" >
                &lt;!&ndash;构造方法的 简单方法依赖注入&ndash;&gt;
                &lt;!&ndash;type看是解决耦合 数据类型一多不知道对应谁&ndash;&gt;
                <constructor-arg type="int" value="10" />
                <constructor-arg type="java.lang.String"  value="mysql" />
        </bean>
        <bean id="userDao" class="com.yuanh.dao.impl.UserDaoImpl" />
        <bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl">
                <constructor-arg name="bookDao" ref="bookDao" />
                <constructor-arg name="userDao" ref="userDao" />
        </bean>-->


        <!--解决参数类型重复问题，使用位置解决参数匹配-->
        <!--<bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" >
                &lt;!&ndash;index 直接告诉他第几个参数&ndash;&gt;
                <constructor-arg index="0"  value="100" />
                <constructor-arg index="1"  value="mysql" />
        </bean>
        <bean id="userDao" class="com.yuanh.dao.impl.UserDaoImpl" />
        <bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl">
                <constructor-arg name="bookDao" ref="bookDao" />
                <constructor-arg name="userDao" ref="userDao" />
        </bean>-->


        <!--依赖自动装配-->
        <!--<bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" />-->
        <bean id="bookDao" class="com.yuanh.dao.impl.BookDaoImpl" />
        <!--autowire="byType" 按类型自动装配-->
        <bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl" autowire="byType" />
        <!--autowire="byName" 按名称自动装配-->
        <!--<bean id="bookService" class="com.yuanh.service.impl.BookServiceImpl" autowire="byName" />-->
                <!--自己装配-->
                <!--<property name="bookDao" ref="bookDao"></property>-->
        <!--</bean>-->
</beans>